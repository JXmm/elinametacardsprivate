import asyncio
import json
import logging
import os
import random
import sys
from datetime import datetime

from aiogram import Bot, Dispatcher, Router
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, BufferedInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiohttp import web, ClientSession
from dotenv import load_dotenv
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application

from database import init_db, add_or_update_user, get_user, save_request, update_current_request, clear_current_request

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN:
    print("‚ùå BOT_TOKEN not found in .env")
    sys.exit(1)

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–¥–ª—è MVP)
user_states = {}

class CardNumber(StatesGroup):
    waiting_for_number = State()

async def download_github_image(image_url: str, token: str) -> bytes | None:
    headers = {}
    if token:
        headers['Authorization'] = f'token {token}'
    try:
        async with ClientSession() as session:
            async with session.get(image_url, headers=headers) as resp:
                if resp.status == 200:
                    return await resp.read()
                else:
                    logging.error(f"‚ùå HTTP {resp.status} –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {image_url}")
                    return None
    except Exception as e:
        logging.error(f"üí• –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

def create_router(cards, help_questions):
    router = Router()
    GITHUB_TOKEN = os.getenv('GITHUB_TOKEN')
    if not GITHUB_TOKEN:
        logging.warning("‚ö†Ô∏è GITHUB_TOKEN –Ω–µ –∑–∞–¥–∞–Ω! –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")

    # --- /start ---
    @router.message(CommandStart())
    async def start_handler(message: Message) -> None:
        user_id = message.from_user.id
        first_name = message.from_user.first_name

        existing_user = get_user(user_id)
        if existing_user:
            greeting = "–î–æ—Ä–æ–≥–∞—è...\n\n–†–∞–¥–∞ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è —Å–Ω–æ–≤–∞! üåø"
        else:
            add_or_update_user(user_id, first_name)
            greeting = f"–î–æ—Ä–æ–≥–∞—è, {first_name}...\n\n–ü—Ä–∏–≤–µ—Ç! üåø"

        await message.answer(greeting)
        await asyncio.sleep(1)
        text = (
            "–ö–æ–≥–¥–∞ —Ç—ã –≤—ã—Ç—è–Ω–µ—à—å –∫–∞—Ä—Ç—É, –Ω–∞–ø—Ä–∏–º–µ—Ä, –±–ª–æ–∫, –Ω–µ —Å–ø–µ—à–∏ —Å—Ä–∞–∑—É —á–∏—Ç–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ. "
            "–ü–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ –∫–∞—Ä—Ç—É –∏ –≤—ã–ø–∏—à–∏ —Å–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞. \n–ü–µ—Ä–≤–æ–µ —á—É–≤—Å—Ç–≤–æ, —Å–º–æ—Ç—Ä–∏ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π –≤—ã–ø–∏—Å—ã–≤–∞—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ, "
            "–∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –ø–æ—è–≤–ª—è—é—Ç—Å—è. \n\n–î–∞–ª—å—à–µ, —Å–º–æ—Ç—Ä—è –Ω–∞ —Å–ø–∏—Å–æ–∫, –∑–∞–¥–∞–π —Å–µ–±–µ –≤–æ–ø—Ä–æ—Å: "
            "<b>‚Äú–ö–∞–∫–æ–µ —á—É–≤—Å—Ç–≤–æ –∫–ª—é—á–µ–≤–æ–µ?‚Äù</b> –ü—Ä–æ–¥–æ–ª–∂–∞–π —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç—É –∏ –ø–æ–¥—É–º–∞–π, "
            "<b>–∫–∞–∫–∏–º —Å–æ–±—ã—Ç–∏–µ–º –≤—ã–∑–≤–∞–Ω–æ —ç—Ç–æ —á—É–≤—Å—Ç–≤–æ</b>, <b>–æ —á–µ–º –∫–∞—Ä—Ç–∞ –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç</b>. \n\n"
            "–ò —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞—á–∏–Ω–∞–π —á–∏—Ç–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã!‚ú®  \n\n–ì–æ—Ç–æ–≤–∞? \n\n"
            "–ê —Å–µ–π—á–∞—Å –ø–æ–¥—É–º–∞–π –∏ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å, –Ω–∞–¥ –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—á–µ—à—å –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è...‚ú®"
        )
        await message.answer(text, parse_mode=ParseMode.HTML)
        user_states[user_id] = {'step': 'waiting_for_request'}
        clear_current_request(user_id)

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ ---
    @router.message()
    async def request_handler(message: Message) -> None:
        user_id = message.from_user.id
        if user_id not in user_states or user_states[user_id].get('step') != 'waiting_for_request':
            return

        user_states[user_id]['request'] = message.text
        user_states[user_id]['step'] = 'request_received'
        update_current_request(user_id, message.text)

        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Åüí´", callback_data="draw_cards")
        await message.answer("–û—Ç–ª–∏—á–Ω–æ!‚ú®", reply_markup=keyboard.as_markup())

    # --- –í—ã—Ç—è–≥–∏–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç ---
    @router.callback_query(lambda c: c.data == "draw_cards")
    async def draw_cards_handler(callback: CallbackQuery) -> None:
        await callback.answer()
        user_id = callback.from_user.id

        if not GITHUB_TOKEN:
            await callback.message.answer("–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞—Ä—Ç–∞–º.")
            return

        block_temp = await callback.bot.send_message(chat_id=user_id, text="–í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∫–∞—Ä—Ç—É –±–ª–æ–∫...")
        request_text = user_states.get(user_id, {}).get('request', "No specific request")

        block_cards = [c for c in cards if c['type'] == 'block']
        resource_cards = [c for c in cards if c['type'] == 'resource']

        if not block_cards or not resource_cards:
            await callback.bot.delete_message(chat_id=user_id, message_id=block_temp.message_id)
            await callback.message.answer("–û—à–∏–±–∫–∞: –∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return

        block_card = random.choice(block_cards)
        resource_card = random.choice(resource_cards)

        block_image_bytes = await download_github_image(block_card['image_url'], GITHUB_TOKEN)
        if not block_image_bytes:
            await callback.bot.delete_message(chat_id=user_id, message_id=block_temp.message_id)
            await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–ª–æ–∫-–∫–∞—Ä—Ç—É.")
            return

        resource_image_bytes = await download_github_image(resource_card['image_url'], GITHUB_TOKEN)
        if not resource_image_bytes:
            await callback.bot.delete_message(chat_id=user_id, message_id=block_temp.message_id)
            await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ—Å—É—Ä—Å-–∫–∞—Ä—Ç—É.")
            return

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –±–ª–æ–∫-–∫–∞—Ä—Ç—ã
        await callback.bot.delete_message(chat_id=user_id, message_id=block_temp.message_id)
        kb_block = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"desc_block:{block_card['id']}")]
        ])
        await callback.bot.send_photo(
            chat_id=user_id,
            photo=BufferedInputFile(block_image_bytes, filename=f"{block_card['id']}.png"),
            reply_markup=kb_block
        )

        await asyncio.sleep(1)  # ‚Üê –¥–ª—è —Ç–µ—Å—Ç–æ–≤; –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ ‚Äî 300

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ—Å—É—Ä—Å-–∫–∞—Ä—Ç—ã
        resource_temp = await callback.bot.send_message(chat_id=user_id, text="–í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∫–∞—Ä—Ç—É —Ä–µ—Å—É—Ä—Å...")
        await asyncio.sleep(0.5)
        await callback.bot.delete_message(chat_id=user_id, message_id=resource_temp.message_id)

        kb_resource = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"desc_resource:{resource_card['id']}")]
        ])
        await callback.bot.send_photo(
            chat_id=user_id,
            photo=BufferedInputFile(resource_image_bytes, filename=f"{resource_card['id']}.png"),
            reply_markup=kb_resource
        )

        save_request(user_id, request_text, block_card['id'], resource_card['id'],
                     block_card['description'], resource_card['description'])
        clear_current_request(user_id)

        user_states[user_id] = {
            'step': 'waiting_for_feedback',
            'block_card': block_card,
            'resource_card': resource_card,
            'request': request_text
        }

        asyncio.create_task(send_followup_questions(user_id, callback.bot))

    async def send_followup_questions(user_id: int, bot: Bot):
        await asyncio.sleep(300)
        state = user_states.get(user_id)
        if not state or state.get('step') != 'waiting_for_feedback':
            return

        text = "–ü–æ–ª—É—á–∏–ª–∞ –ª–∏ —Ç—ã –æ—Ç–≤–µ—Ç –Ω–∞ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å, –∏–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω—ã –ø–æ–¥—Å–∫–∞–∑–∫–∏?"
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="–ü–æ–¥—Å–∫–∞–∑–∫–∏‚ú®", callback_data="need_hints")
        keyboard.button(text="–ü–æ–ª—É—á–∏–ª–∞‚ù§Ô∏è", callback_data="received_insights")

        try:
            await bot.send_message(chat_id=user_id, text=text, reply_markup=keyboard.as_markup())
            user_states[user_id]['step'] = 'waiting_for_hints_or_done'
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å follow-up: {e}")

    @router.callback_query(lambda c: c.data == "need_hints")
    async def hints_handler(callback: CallbackQuery) -> None:
        await callback.answer()
        user_id = callback.from_user.id
        state = user_states.get(user_id)
        if not state:
            await callback.message.answer("–ò–∑–≤–∏–Ω–∏, –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–≤–æ—é —Å–µ—Å—Å–∏—é.")
            return

        block_card = state['block_card']
        resource_card = state['resource_card']

        block_qs = [q for q in help_questions if q['type'] == 'block']
        res_qs = [q for q in help_questions if q['type'] == 'resource']

        if block_qs:
            q = random.choice(block_qs)
            await callback.bot.send_message(user_id, f"{block_card['name']}: {q['question']}")
            await asyncio.sleep(10)

        if res_qs:
            q = random.choice(res_qs)
            await callback.bot.send_message(user_id, f"{resource_card['name']}: {q['question']}")

        user_states[user_id]['step'] = 'hints_sent'

    @router.callback_query(lambda c: c.data == "received_insights")
    async def insights_handler(callback: CallbackQuery) -> None:
        await callback.answer()
        user_id = callback.from_user.id
        user_states.pop(user_id, None)
        await callback.message.answer(
            "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –ü—É—Å—Ç—å —Ç–≤–æ–π –¥–µ–Ω—å –±—É–¥–µ—Ç –Ω–∞–ø–æ–ª–Ω–µ–Ω —è—Å–Ω–æ—Å—Ç—å—é –∏ —Ü–µ–ª—å—é. "
            "–Ø –∑–¥–µ—Å—å, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≥–ª—É–±–∂–µ —Ä–∞—Å–∫—Ä—ã—Ç—å –ø–æ–Ω–∏–º–∞–Ω–∏–µ."
        )

    # --- –ö–æ–º–∞–Ω–¥—ã ---
    @router.message(Command("block"))
    async def block_command(message: Message) -> None:
        if not GITHUB_TOKEN:
            await message.answer("–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞.")
            return
        cards_block = [c for c in cards if c['type'] == 'block']
        if not cards_block:
            await message.answer("–ö–∞—Ä—Ç—ã –±–ª–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
            return
        card = random.choice(cards_block)
        img = await download_github_image(card['image_url'], GITHUB_TOKEN)
        if not img:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
            return
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"desc_block:{card['id']}")]
        ])
        await message.answer_photo(photo=BufferedInputFile(img, filename=f"{card['id']}.png"), reply_markup=kb)

    @router.message(Command("resource"))
    async def resource_command(message: Message) -> None:
        if not GITHUB_TOKEN:
            await message.answer("–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞.")
            return
        cards_res = [c for c in cards if c['type'] == 'resource']
        if not cards_res:
            await message.answer("–ö–∞—Ä—Ç—ã —Ä–µ—Å—É—Ä—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
            return
        card = random.choice(cards_res)
        img = await download_github_image(card['image_url'], GITHUB_TOKEN)
        if not img:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
            return
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"desc_resource:{card['id']}")]
        ])
        await message.answer_photo(photo=BufferedInputFile(img, filename=f"{card['id']}.png"), reply_markup=kb)

    @router.message(Command("number"))
    async def number_command(message: Message, state: FSMContext) -> None:
        if not GITHUB_TOKEN:
            await message.answer("–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞.")
            return
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (–æ—Ç 1 –¥–æ 76):")
        await state.set_state(CardNumber.waiting_for_number)

    @router.message(CardNumber.waiting_for_number)
    async def number_input_handler(message: Message, state: FSMContext) -> None:
        try:
            card_id = int(message.text.strip())
            if not (1 <= card_id <= 76):
                await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 76.")
                return
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
            return

        card = next((c for c in cards if c['id'] == card_id), None)
        if not card:
            await message.answer("–ö–∞—Ä—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            await state.clear()
            return

        img = await download_github_image(card['image_url'], GITHUB_TOKEN)
        if not img:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
            await state.clear()
            return

        card_type = card['type']
        if card_type not in ('block', 'resource'):
            card_type = 'block'

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"desc_{card_type}:{card['id']}")]
        ])
        await message.answer_photo(
            photo=BufferedInputFile(img, filename=f"{card['id']}.png"),
            reply_markup=kb
        )
        await state.clear()

    # --- –ö–æ–ª–ª–±—ç–∫ –æ–ø–∏—Å–∞–Ω–∏—è ---
    @router.callback_query(lambda c: c.data.startswith("desc_"))
    async def desc_callback(callback: CallbackQuery) -> None:
        await callback.answer()
        try:
            prefix, card_id_str = callback.data.split(":", 1)
            card_id = int(card_id_str)
            card_type = prefix.replace("desc_", "")
        except (ValueError, IndexError):
            await callback.message.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã.")
            return

        card = next((c for c in cards if c['id'] == card_id), None)
        if not card:
            await callback.message.answer("–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        await callback.message.answer(card['description'])

    return router

# --- MAIN ---
def main():
    logging.basicConfig(level=logging.INFO)
    init_db()

    with open('cards.json', 'r', encoding='utf-8') as f:
        cards = json.load(f)
    with open('help.json', 'r', encoding='utf-8') as f:
        help_questions = json.load(f)

    if os.getenv("RENDER_EXTERNAL_URL"):
        # Webhook (Render)
        external_url = os.getenv("RENDER_EXTERNAL_URL")
        WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
        webhook_url = f"{external_url}{WEBHOOK_PATH}"
        WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "elina_webhook_2025")

        bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
        dp = Dispatcher()
        router = create_router(cards, help_questions)
        dp.include_router(router)

        async def on_startup(app):
            await bot.set_webhook(url=webhook_url, secret_token=WEBHOOK_SECRET, drop_pending_updates=True)

        app = web.Application()
        app.on_startup.append(on_startup)
        SimpleRequestHandler(dispatcher=dp, bot=bot, secret_token=WEBHOOK_SECRET).register(app, path=WEBHOOK_PATH)
        setup_application(app, dp, bot=bot)
        web.run_app(app, host="0.0.0.0", port=int(os.getenv("PORT", 10000)))
    else:
        # Polling (–ª–æ–∫–∞–ª—å–Ω–æ)
        async def run_polling():
            bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
            await bot.delete_webhook(drop_pending_updates=True)
            dp = Dispatcher()
            router = create_router(cards, help_questions)
            dp.include_router(router)
            await dp.start_polling(bot, skip_updates=True)

        asyncio.run(run_polling())

if __name__ == "__main__":
    main()